import streamlit as st
import pandas as pd
import datetime
import sqlite3
from io import BytesIO
from docx import Document
from fpdf import FPDF
import matplotlib.pyplot as plt
import seaborn as sns
import time

DB_USUARIOS = "/mnt/data/usuarios_logs.db"

# Inicializar banco de dados de usu√°rios e logs
conn = sqlite3.connect(DB_USUARIOS)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS usuarios (
    username TEXT PRIMARY KEY,
    password TEXT
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS logs (
    usuario TEXT,
    acao TEXT,
    timestamp TEXT
)
""")
conn.commit()

# Carga inicial dos usu√°rios
c.execute("SELECT username, password FROM usuarios")
usuarios_db = dict(c.fetchall())
if not usuarios_db:
    c.executemany("INSERT INTO usuarios (username, password) VALUES (?, ?)", [
        ("admin", "1234"),
        ("gestor", "gestao2024"),
        ("juridico", "legal2024")
    ])
    conn.commit()
    c.execute("SELECT username, password FROM usuarios")
    usuarios_db = dict(c.fetchall())
conn.close()

st.sidebar.markdown("## üîê Login de Usu√°rio")
username = st.sidebar.text_input("Usu√°rio")
password = st.sidebar.text_input("Senha", type="password")
authenticated = username in usuarios_db and password == usuarios_db[username]

if not authenticated:
    st.warning("üîí Acesso restrito. Informe usu√°rio e senha.")
    st.stop()

st.success(f"‚úÖ Bem-vindo(a), {username}!")

# Fun√ß√£o para registrar log
def registrar_log(usuario, acao):
    conn = sqlite3.connect(DB_USUARIOS)
    conn.execute("INSERT INTO logs (usuario, acao, timestamp) VALUES (?, ?, ?)", (usuario, acao, time.strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

# √Årea administrativa
if username == "admin":
    st.sidebar.markdown("---")
    st.sidebar.subheader("üõ† Administra√ß√£o")
    if st.sidebar.checkbox("Visualizar usu√°rios e logs"):
        conn = sqlite3.connect(DB_USUARIOS)
        df_usuarios = pd.read_sql("SELECT * FROM usuarios", conn)
        df_logs = pd.read_sql("SELECT * FROM logs ORDER BY timestamp DESC", conn)
        conn.close()

        st.markdown("### üë• Usu√°rios Cadastrados")
        st.dataframe(df_usuarios)

        st.markdown("### ‚ûï Gerenciar Usu√°rios")
        novo_user = st.text_input("Novo usu√°rio")
        nova_senha = st.text_input("Senha para novo usu√°rio", type="password")
        if st.button("Cadastrar Usu√°rio") and novo_user and nova_senha:
            conn = sqlite3.connect(DB_USUARIOS)
            try:
                conn.execute("INSERT INTO usuarios (username, password) VALUES (?, ?)", (novo_user, nova_senha))
                conn.commit()
                st.success(f"Usu√°rio '{novo_user}' cadastrado.")
                registrar_log(username, f"Cadastro de usu√°rio: {novo_user}")
            except sqlite3.IntegrityError:
                st.warning("Usu√°rio j√° existe.")
            conn.close()

        conn = sqlite3.connect(DB_USUARIOS)
        excluir_user = st.selectbox("Selecionar usu√°rio para remover", [u for u in usuarios_db if u != "admin"])
        if st.button("Remover Usu√°rio"):
            conn.execute("DELETE FROM usuarios WHERE username = ?", (excluir_user,))
            conn.commit()
            st.success(f"Usu√°rio '{excluir_user}' removido.")
            registrar_log(username, f"Remo√ß√£o de usu√°rio: {excluir_user}")
        conn.close()

        st.markdown("### üïì Logs de Relat√≥rios e A√ß√µes")
        st.dataframe(df_logs)
